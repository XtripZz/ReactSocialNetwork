{"version":3,"sources":["components/MainContainer/Common/FormsControls/FormsControls.module.css","utils/utils.js","components/MainContainer/Common/FormsControls/FormsControls.js","hoc/withAuthRedirect.jsx","components/MainContainer/Dialogs/DialogsItem/DialogsItem.module.css","components/MainContainer/Dialogs/Message/Message.module.css","components/MainContainer/Dialogs/Dialogs.module.css","components/MainContainer/Dialogs/DialogsItem/DialogsItem.jsx","components/MainContainer/Dialogs/Message/Message.jsx","components/MainContainer/Dialogs/WriteAMessage/WriteAMessage.jsx","components/MainContainer/Dialogs/Dialogs.jsx","components/MainContainer/Dialogs/DialogsContainer.jsx"],"names":["module","exports","required","value","maxLengthCreator","maxLength","length","FormControl","input","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","restProps","child","Input","createField","placeholder","name","validators","component","text","validate","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","to","React","connect","DialogsItem","path","id","dialogs","active","dialogsLink","src","Message","message","maxLength50","WriteAMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","WriteAMessage","values","sendMessage","newMessageBody","Dialogs","dialogsElements","map","d","key","messagesElements","messages","m","dialogsItems","compose","dialogsPage","dispatch","action","sendMessageCreator"],"mappings":"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","file":"static/js/5.7fce0564.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2msPp\",\"error\":\"FormsControls_error__1MSDC\",\"formSummaryError\":\"FormsControls_formSummaryError__2ser5\"};","export const required = value => {\r\n    if (value) return undefined\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = maxLength => value => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","import React from 'react'\r\nimport s from './FormsControls.module.css'\r\nimport {Field} from \"redux-form\";\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children,}) => {\r\n\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = props => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}>\r\n        <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n}\r\n\r\nexport const Input = props => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}>\r\n        <input {...input} {...restProps} />\r\n    </FormControl>\r\n}\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nlet mapStateToPropsForRedirect = state => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = Component => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"DialogsItem_dialogs__agl_8\",\"dialogsLink\":\"DialogsItem_dialogsLink__1B8AP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1xeHx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1LVmI\",\"dialogsItems\":\"Dialogs_dialogsItems__3MnaQ\",\"active\":\"Dialogs_active__1slH8\",\"messages\":\"Dialogs_messages__Brx5v\"};","import React from 'react';\r\nimport s from './DialogsItem.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst DialogsItem = (props) => {\r\n  let path = `/dialogs/${props.id}`;\r\n\r\n  return (\r\n    <div className={`${s.dialogs} ${s.active}`}>\r\n\r\n      <NavLink className={s.dialogsLink} to={path}>\r\n        <img src='https://sun9-42.userapi.com/c857132/v857132036/16dae6/n3kVjOxUgn8.jpg' />\r\n        <span>{props.name}</span>\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogsItem;\r\n","import React from 'react';\r\nimport s from './Message.module.css';\r\n\r\nconst Message = (props) => {\r\n  return (\r\n    <div className={s.message}>{props.message}</div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport s from './WriteAMessage.module.css';\r\nimport {reduxForm, Field} from \"redux-form\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/utils\";\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst WriteAMessageForm = props => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newMessageBody'}\r\n                       component={Textarea} placeholder={'Message text'}\r\n                       validate={[required, maxLength50]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst WriteAMessageReduxForm = reduxForm({\r\n    form: 'dialogsWriteAMessage'\r\n})(WriteAMessageForm)\r\n\r\nconst WriteAMessage = props => {\r\n\r\n    const addNewMessage = values => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <WriteAMessageReduxForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WriteAMessage;\r\n","import React from 'react';\r\nimport DialogsItem from './DialogsItem/DialogsItem';\r\nimport Message from './Message/Message';\r\nimport s from './Dialogs.module.css';\r\nimport WriteAMessage from './WriteAMessage/WriteAMessage';\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n  let dialogsElements =\r\n    props.dialogs.map(d => <DialogsItem id={d.id} name={d.name} key={d.id}/>);\r\n  let messagesElements =\r\n    props.messages.map(m => <Message id={m.id} message={m.message} key={m.id}/>);\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.dialogs}>\r\n        <div className={s.dialogsItems}>\r\n          {dialogsElements}\r\n        </div>\r\n\r\n        <div className={s.messages}>\r\n          {messagesElements}\r\n        </div>\r\n      </div>\r\n      <WriteAMessage sendMessage={props.sendMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport Dialogs from './Dialogs';\r\nimport {sendMessageCreator, updateNewMessageTextCreator} from \"../../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nlet matDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            let action = sendMessageCreator(newMessageBody);\r\n            dispatch(action);\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, matDispatchToProps),\r\n    withAuthRedirect,\r\n)(Dialogs)"],"sourceRoot":""}